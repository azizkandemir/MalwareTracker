{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Malware Tracker\n\n\nIntroduction\n\n\nCheck out the working demo of this repo from \nHERE\n.\n\n\nWhat is Malware Tracker?\n\n\nMalware Tracker is a web API that brings 3 websites' malware data together. These websites are:\n\n\n\n\nMalshare\n\n\nOpenBugBounty\n\n\nCyberCrime-Tracker\n\n\n\n\nFirst of all thanks a lot to these websites for believing that information should be shared.\n\n\nProject layout\n\n\nbin/                        # Includes bash scripts.\n    run_daily_digest.sh     # Bash script that handles malshare_script.py with --update24 argument:\n    run_malshare_script.sh  # Bash script that handles malshare_script.py with --update argument.\n    run_rss_tracker.sh      # Bash script that handles rss_tracker.py\nDatabases/                  # Includes all databases of this project.\n    api-db/                 # Includes databases which contains details of malwares.\n        cyber-crime-tracker.db\n        malshare.db\n        open-bug-bounty.db\ndocs/\n    index.md                # The documentation homepage.\n    ...                     # Other markdown pages, images and other files.\nstatic/\n    ...                     # Markdown pages, images and other files.\ntemplates/\n    ...                     # Markdown pages, images and other files.\napi.py                      # Flask application.\nconfig.py                   # Configuration file.\nepoch_to_datetime.py        # Python script that converts epoch time format into datetime format.\nmalshare_script.py          # Python script that can parse malshare.\nmalshare_utils.py           # Contains useful python function.\nrss_tracker.py              # Python script that can parse openbugbounty and cybercrime-tracker.\nrequirements.txt\n\n\n\nGet started\n\n\nGo into the project folder, 'MalwareTracker', that you downloaded. First of all create a virtualenv inside the project \nfolder:\n\n\n../MalwareTracker\nvirtualenv venv\n\n\n\n\nActivate your virtualenv by running:\n\n\n../MalwareTracker\nsource ./venv/bin/activate\n\n\n\n\nThen install the \nrequirements.txt\n after you activated your venv into your \nvirtualenv (venv)\n:\n\n\n(venv) ../MalwareTracker\npip install -r requirements.txt", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-malware-tracker", 
            "text": "", 
            "title": "Welcome to Malware Tracker"
        }, 
        {
            "location": "/#introduction", 
            "text": "Check out the working demo of this repo from  HERE .", 
            "title": "Introduction"
        }, 
        {
            "location": "/#what-is-malware-tracker", 
            "text": "Malware Tracker is a web API that brings 3 websites' malware data together. These websites are:   Malshare  OpenBugBounty  CyberCrime-Tracker   First of all thanks a lot to these websites for believing that information should be shared.", 
            "title": "What is Malware Tracker?"
        }, 
        {
            "location": "/#project-layout", 
            "text": "bin/                        # Includes bash scripts.\n    run_daily_digest.sh     # Bash script that handles malshare_script.py with --update24 argument:\n    run_malshare_script.sh  # Bash script that handles malshare_script.py with --update argument.\n    run_rss_tracker.sh      # Bash script that handles rss_tracker.py\nDatabases/                  # Includes all databases of this project.\n    api-db/                 # Includes databases which contains details of malwares.\n        cyber-crime-tracker.db\n        malshare.db\n        open-bug-bounty.db\ndocs/\n    index.md                # The documentation homepage.\n    ...                     # Other markdown pages, images and other files.\nstatic/\n    ...                     # Markdown pages, images and other files.\ntemplates/\n    ...                     # Markdown pages, images and other files.\napi.py                      # Flask application.\nconfig.py                   # Configuration file.\nepoch_to_datetime.py        # Python script that converts epoch time format into datetime format.\nmalshare_script.py          # Python script that can parse malshare.\nmalshare_utils.py           # Contains useful python function.\nrss_tracker.py              # Python script that can parse openbugbounty and cybercrime-tracker.\nrequirements.txt", 
            "title": "Project layout"
        }, 
        {
            "location": "/#get-started", 
            "text": "Go into the project folder, 'MalwareTracker', that you downloaded. First of all create a virtualenv inside the project \nfolder:  ../MalwareTracker virtualenv venv  Activate your virtualenv by running:  ../MalwareTracker source ./venv/bin/activate  Then install the  requirements.txt  after you activated your venv into your  virtualenv (venv) :  (venv) ../MalwareTracker pip install -r requirements.txt", 
            "title": "Get started"
        }, 
        {
            "location": "/guide/demoinstall/", 
            "text": "Introduction\n\n\nThere is a demo of this project which is currently running on my remote server, \nhere\n, and in\nthis guide I will try to explain how to build a system from the beginning by using features of this project.\n\n\nInstallation\n\n\nAfter you obtain the local copy of MalwareTracker by downloading or cloning the repository, you can start to build API \non your own system. First of all create a virtualenv inside the project folder:\n\n\n../MalwareTracker\nvirtualenv venv\n\n\n\n\nActivate your virtualenv by running:\n\n\n../MalwareTracker\nsource ./venv/bin/activate\n\n\n\n\nThen install the \nrequirements.txt\n after you activated your venv into your \nvirtualenv (venv)\n:\n\n\n(venv) ../MalwareTracker\npip install -r requirements.txt\n\n\n\n\nFetching the Malware Data\n\n\nThere are 2 scripts that fetch malware data from 3 websites, \nmalshare_script.py\n and \nrss_tracker.py\n. Both scripts\nneeds a folder to store the data within databases. In the \nconfig.py\n file there are 2 database folder variables:\n\n\n\n\n\n\ndatabase_folder\n\n\n\n\n\n\napi_database_folder\n\n\n\n\n\n\ndatabase_folder\n is for including all databases, irrespective of their usage, and \napi_database_folder\n is for including\nthe databases only will be used for our API.\n\n\nFor this demo we are goind to set these variables to:\n\n\ndatabase_folder = './Databases/'\napi_database_folder = database_folder + 'api-db'\n\n\n\n\n\nmalshare_script.py\n\n\nBy using this script we will be fetching the malware data from \nMalShare\n.\n\n\nNote: Do the next steps in the project folder with virtual environment that you've created.\n\n\n\nLet's say that we want to fetch malware data since the first day that we can access via MalShare \narchive\n.\nTo do this we need to follow these steps:\n\n\n1)\n Get the MD5 hashes and dates via \n-uyes\n argument of \nmalshare_script.py\n.\n\n\n2)\n Get the details of malware data by using the MD5 hashes that you gather in the first step with \n-h2d\n argument of\n\nmalshare_script.py\n.\n\n\n3)\n Convert the date column which is in epoch format of database that you created in the 2nd step into\ndatetime format by using \nepoch_to_datetime.py\n.\n\n\n4)\n Get the details of yesterday into our details database by using bash script named \nrun_daily_digest.sh\n in the \n\nbin/\n folder.\n\n\nFor the 1st step we need to modify the \nconfig.py\n for:\n\n\n\n\nfirst_epoch_of_hash\n\n\nmalshare_api_key\n\n\nhashes_db_name\n\n\n\n\nSet \nfirst_epoch_of_hash\n to the epoch time of the first date that you want to fetch the MD5 hashes until yesterday. Since\nthe first date that we can access from MalShare \narchive\n is \n2017-09-14\n we are going to set\nthis variable to epoch format of this date.\n\n\nfirst_epoch_of_hash = 1505347200\n\n\n\nSet \nmalshare_api_key\n to the api key that you gather by registering to \nMalShare\n.\nWithout this key you will not be able to access to APIs.\n\n\nSet \nhashes_db_name\n to any name which is ending with '.db' in order to create \nsqlite\n database. This\ndatabase will have 2 tables named \nhash_data\n and \nsource_data\n. The table that we will be dealing with will be \nhash_data\n\nwith 2 columns named \nhash\n and \ndate\n in epoch format.\n\n\nhashes_db_name = 'uyes_hashes.db'\n\n\n\nAfter you set these variables, you can run \nmalshare_script.py\n with \n-uyes\n argument:\n\n\n(venv) ../MalwareTracker\npython3 malshare_script.py -uyes\n\n\n\n\nNow in the \nDatabases/\n folder it will be a database named \nuyes_hashes.db\n. You can see the data inside by:\n\n\n(venv) ../MalwareTracker/Database\nsqlite3 uyes_hashes.db \n\n\n\n\nFor further information about \nsqlite\n check this out --\n \nSqlite documentation\n\n\nNext step is to fetch details of MD5 hashes that we've just obtained from MalShare. To do this we need to modify \n\nconfig.py\n for:\n\n\n\n\ndetails_db_name\n\n\n\n\nSet \ndetails_db_name\n to any name which is ending with '.db' in order to create \nsqlite\n database. This database will\nhave 1 table named \ndata\n This table will be with 4 columns named \nhash\n, \nf_type\n, \nsource\n, \ndate\n(in epoch format).\n\n\ndetails_db_name = 'uyes_details.db'\n\n\n\nAfter you set this variable, you can run \nmalshare_script.py\n with \n-h2d\n argument:\n\n\n(venv) ../MalwareTracker\npython3 malshare_script.py -h2d\n\n\n\n\nNow in the \nDatabases/\n folder it will be a database named \nuyes_details.db\n. you can see the data inside by:\n\n\n(venv) ../MalwareTracker/Databases\nsqlite3 uyes_details.db \n\n\n\n\nNext step is to convert \nuyes_detals.db\n database's \ndate\n column from epoch format into datetime format. To do this\nwe need to modify \nconfig.py\n for:\n\n\n\n\ndb_to_convert\n\n\nconverted_db\n\n\n\n\nSet \ndb_to_convert\n to any name which is ending with '.db' in order to provide the information of source database to\n\nepoch_to_datetime.py\n script.\n\n\nSet \nconverted_db\n to any name which is ending with '.db' in order to provide the information of target database which\nwill be created to \nepoch_to_datetime.py\n script.\n\n\nSince we want to convert the database of details that we've just created \nuyes_details.db\n with the \ndate\n column in\nepoch format, we are going to set \ndb_to_convert\n variable to \nuyes_details.db\n:\n\n\ndb_to_convert = 'uyes_details.db'\n\n\n\nWe are going to set \nconverted_db\n name to any name that we want so:\n\n\nconverted_db = 'malshare.db'\n\n\n\nAfter you set these variable, you can run \nepoch_to_datetime.py\n:\n\n\n(venv) ../MalwareTracker\npython3 epoch_to_datetime.py\n\n\n\n\nHere we go, now we have a database named \nmalshare.db\n in \nDatabases/\n folder with all of the malware details since\n\n2017-09-14\n.\n\n\nBut still we are missing \nyesterday\n's malware details. So this is what we are going to deal next.\n\n\nMove the \nmalshare.db\n from \nDatabases/\n folder into \nDatabases/api-db\n folder. \n\n\n(venv) ../MalwareTracker\nmv ./Databases/malshare.db ./Databases/api-db/\n\n\n\n\nRun the run_daily_digest.sh which is in \nbin/\n folder:\n\n\n(venv) ../MalwareTracker\n/bin/bash ./bin/run_daily_digest.sh\n\n\n\n\nNow we also have details of yesterday malware data.\n\n\n\n\nrss_tracker.py\n\n\nBy using this script we will be fetching the malware data from:\n\n\n\n\n\n\nOpenBugBounty RSS feed \n\n\n\n\n\n\nCyberCrime-Tracker RSS feed\n\n\nNote: Do the next steps in the project folder with virtual environment that you've created.\n\n\n\n\n\n\nSince these website are not sharing data for old dates, we will be only able to fetch and store their RSS feed in\nour databases. To do this follow these steps:\n\n\n1)\n Modify \nconfig.py\n for related variables.\n\n\n2)\n Run \nrss_tracker.py\n script.\n\n\nNow open \nconfig.py\n and set these variables to any database name which ends with '.db':\n\n\n\n\n\n\nopenbugbounty_db_name\n\n\n\n\n\n\ncybercrimetracker_db_name\n\n\n\n\n\n\nFor our demo we are going to set these variables to:\n\n\nopenbugbounty_db_name = 'open-bug-bounty.db'\ncybercrimetracker_db_name = 'cyber-crime-tracker.db'\n\n\n\nNow we are ready to run \nrss_tracker.py\n script. You can run this script in 2 different ways:\n\n\n\n\nRun the script itself manually with \npython3\n command.\n\n\n\n\n(venv) ../MalwareTracker\npython3 rss_tracker.py\n\n\n\n\nOR\n\n\n\n\nRun \nrun_rss_tracker.sh\n bash script and let it to handle everything.\n\n\n\n\n(venv) ../MalwareTracker\n/bin/bash ./bin/run_rss_tracker.sh\n\n\n\n\nAfter you run one of these statements, it will be created 2 databases with the names that you've just provided to\n\nopenbugbounty_db_name\n and \ncybercrimetracker_db_name\n variables in \nconfig.py\n.\n\n\nNow we have malware data from 3 different sources and we are ready to bring online our API.\n\n\nJob Scheduling for the Scripts\n\n\nJob scheduling needed to be done for a proper running API in order to fetch malware data from our sources automatically\nin a time period that we are going to decide. There are bunch of job scheduling but we are going to use \ncrontab\n.\n\n\n\n\nFor further information about crontab read the \ndocumentation\n.\n\n\n\n\nWe are going to set 3 jobs to crontab:\n\n\n\n\n\n\nFirst job is going to run run_malshare_script.sh for every 20 minutes.\n\n\n\n\n\n\nSecond job is going to run run_rss_tracker.sh for every 20 minutes.\n\n\n\n\n\n\nThird job is going to run run_daily_digest.sh at 02.00 am (GMT) every day.\n\n\n\n\n\n\nOpen a terminal and do the following:\n\n\n(venv) ../MalwareTracker\ncrontab -e\n\n\n\n\nNow you will be seeing the edit screen of crontab. If you are using crontab for the first time you can clear the \neverything inside and add following lines:\n\n\n* * * * * /bin/bash ../MalwareTracker/bin/run_rss_tracker.sh\n* * * * * /bin/bash ../MalwareTracker/bin/run_malshare_script.sh\n00 02 * * * /bin/bash ../MalwareTracker/bin/run_daily_digest.sh\n\n\n\nSave it and exit. Now if you type \ncrontab -l\n into your terminal you will see 3 jobs that currently working.\n\n\nSo we have collected our data and we set our jobs now it is time to modify \napi.py\n to get online our server for\nour API.Job Scheduling for the Scripts\n\n\n\n\nBuilding the API\n\n\nAPI will be serving on a server with \nflask\n. \napi.py\n in our project folder will be using for this purpose.\n\n\napi.py\n\n\nThis python file connects our databases to users via flask framework. You can run it on your localhost to test.\n\n\napi.py\n initally set to work on \nlocalhost:8080\n so if you just want to test your API just run this command:\n\n\n(venv) ../MalwareTracker\npython3 api.py\n\n\n\n\nNow your API is available on your localhost.\n\n\nIf you want to change the port you can done it modifying \napi.py\n:\n\n\napp.run(host='127.0.0.1', port='8080')\n\n\n\nChange 8080 to any port that you want. If you remove port parameter your server will be running on port \n5000\n \nby default.\n\n\nIf you want to run this API on an online server change this line like following:\n\n\napp.run(host='0.0.0.0', port='8080')\n\n\n\nNow if your IP address is accessible on your server, your website will be online.\n\n\n\n\nFor further information read the \nflask documentation\n.", 
            "title": "Demo Installation"
        }, 
        {
            "location": "/guide/demoinstall/#introduction", 
            "text": "There is a demo of this project which is currently running on my remote server,  here , and in\nthis guide I will try to explain how to build a system from the beginning by using features of this project.", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/demoinstall/#installation", 
            "text": "After you obtain the local copy of MalwareTracker by downloading or cloning the repository, you can start to build API \non your own system. First of all create a virtualenv inside the project folder:  ../MalwareTracker virtualenv venv  Activate your virtualenv by running:  ../MalwareTracker source ./venv/bin/activate  Then install the  requirements.txt  after you activated your venv into your  virtualenv (venv) :  (venv) ../MalwareTracker pip install -r requirements.txt", 
            "title": "Installation"
        }, 
        {
            "location": "/guide/demoinstall/#fetching-the-malware-data", 
            "text": "There are 2 scripts that fetch malware data from 3 websites,  malshare_script.py  and  rss_tracker.py . Both scripts\nneeds a folder to store the data within databases. In the  config.py  file there are 2 database folder variables:    database_folder    api_database_folder    database_folder  is for including all databases, irrespective of their usage, and  api_database_folder  is for including\nthe databases only will be used for our API.  For this demo we are goind to set these variables to:  database_folder = './Databases/'\napi_database_folder = database_folder + 'api-db'", 
            "title": "Fetching the Malware Data"
        }, 
        {
            "location": "/guide/demoinstall/#malshare_scriptpy", 
            "text": "By using this script we will be fetching the malware data from  MalShare .  Note: Do the next steps in the project folder with virtual environment that you've created.  Let's say that we want to fetch malware data since the first day that we can access via MalShare  archive .\nTo do this we need to follow these steps:  1)  Get the MD5 hashes and dates via  -uyes  argument of  malshare_script.py .  2)  Get the details of malware data by using the MD5 hashes that you gather in the first step with  -h2d  argument of malshare_script.py .  3)  Convert the date column which is in epoch format of database that you created in the 2nd step into\ndatetime format by using  epoch_to_datetime.py .  4)  Get the details of yesterday into our details database by using bash script named  run_daily_digest.sh  in the  bin/  folder.  For the 1st step we need to modify the  config.py  for:   first_epoch_of_hash  malshare_api_key  hashes_db_name   Set  first_epoch_of_hash  to the epoch time of the first date that you want to fetch the MD5 hashes until yesterday. Since\nthe first date that we can access from MalShare  archive  is  2017-09-14  we are going to set\nthis variable to epoch format of this date.  first_epoch_of_hash = 1505347200  Set  malshare_api_key  to the api key that you gather by registering to  MalShare .\nWithout this key you will not be able to access to APIs.  Set  hashes_db_name  to any name which is ending with '.db' in order to create  sqlite  database. This\ndatabase will have 2 tables named  hash_data  and  source_data . The table that we will be dealing with will be  hash_data \nwith 2 columns named  hash  and  date  in epoch format.  hashes_db_name = 'uyes_hashes.db'  After you set these variables, you can run  malshare_script.py  with  -uyes  argument:  (venv) ../MalwareTracker python3 malshare_script.py -uyes  Now in the  Databases/  folder it will be a database named  uyes_hashes.db . You can see the data inside by:  (venv) ../MalwareTracker/Database sqlite3 uyes_hashes.db   For further information about  sqlite  check this out --   Sqlite documentation  Next step is to fetch details of MD5 hashes that we've just obtained from MalShare. To do this we need to modify  config.py  for:   details_db_name   Set  details_db_name  to any name which is ending with '.db' in order to create  sqlite  database. This database will\nhave 1 table named  data  This table will be with 4 columns named  hash ,  f_type ,  source ,  date (in epoch format).  details_db_name = 'uyes_details.db'  After you set this variable, you can run  malshare_script.py  with  -h2d  argument:  (venv) ../MalwareTracker python3 malshare_script.py -h2d  Now in the  Databases/  folder it will be a database named  uyes_details.db . you can see the data inside by:  (venv) ../MalwareTracker/Databases sqlite3 uyes_details.db   Next step is to convert  uyes_detals.db  database's  date  column from epoch format into datetime format. To do this\nwe need to modify  config.py  for:   db_to_convert  converted_db   Set  db_to_convert  to any name which is ending with '.db' in order to provide the information of source database to epoch_to_datetime.py  script.  Set  converted_db  to any name which is ending with '.db' in order to provide the information of target database which\nwill be created to  epoch_to_datetime.py  script.  Since we want to convert the database of details that we've just created  uyes_details.db  with the  date  column in\nepoch format, we are going to set  db_to_convert  variable to  uyes_details.db :  db_to_convert = 'uyes_details.db'  We are going to set  converted_db  name to any name that we want so:  converted_db = 'malshare.db'  After you set these variable, you can run  epoch_to_datetime.py :  (venv) ../MalwareTracker python3 epoch_to_datetime.py  Here we go, now we have a database named  malshare.db  in  Databases/  folder with all of the malware details since 2017-09-14 .  But still we are missing  yesterday 's malware details. So this is what we are going to deal next.  Move the  malshare.db  from  Databases/  folder into  Databases/api-db  folder.   (venv) ../MalwareTracker mv ./Databases/malshare.db ./Databases/api-db/  Run the run_daily_digest.sh which is in  bin/  folder:  (venv) ../MalwareTracker /bin/bash ./bin/run_daily_digest.sh  Now we also have details of yesterday malware data.", 
            "title": "malshare_script.py"
        }, 
        {
            "location": "/guide/demoinstall/#rss_trackerpy", 
            "text": "By using this script we will be fetching the malware data from:    OpenBugBounty RSS feed     CyberCrime-Tracker RSS feed  Note: Do the next steps in the project folder with virtual environment that you've created.    Since these website are not sharing data for old dates, we will be only able to fetch and store their RSS feed in\nour databases. To do this follow these steps:  1)  Modify  config.py  for related variables.  2)  Run  rss_tracker.py  script.  Now open  config.py  and set these variables to any database name which ends with '.db':    openbugbounty_db_name    cybercrimetracker_db_name    For our demo we are going to set these variables to:  openbugbounty_db_name = 'open-bug-bounty.db'\ncybercrimetracker_db_name = 'cyber-crime-tracker.db'  Now we are ready to run  rss_tracker.py  script. You can run this script in 2 different ways:   Run the script itself manually with  python3  command.   (venv) ../MalwareTracker python3 rss_tracker.py  OR   Run  run_rss_tracker.sh  bash script and let it to handle everything.   (venv) ../MalwareTracker /bin/bash ./bin/run_rss_tracker.sh  After you run one of these statements, it will be created 2 databases with the names that you've just provided to openbugbounty_db_name  and  cybercrimetracker_db_name  variables in  config.py .  Now we have malware data from 3 different sources and we are ready to bring online our API.", 
            "title": "rss_tracker.py"
        }, 
        {
            "location": "/guide/demoinstall/#job-scheduling-for-the-scripts", 
            "text": "Job scheduling needed to be done for a proper running API in order to fetch malware data from our sources automatically\nin a time period that we are going to decide. There are bunch of job scheduling but we are going to use  crontab .   For further information about crontab read the  documentation .   We are going to set 3 jobs to crontab:    First job is going to run run_malshare_script.sh for every 20 minutes.    Second job is going to run run_rss_tracker.sh for every 20 minutes.    Third job is going to run run_daily_digest.sh at 02.00 am (GMT) every day.    Open a terminal and do the following:  (venv) ../MalwareTracker crontab -e  Now you will be seeing the edit screen of crontab. If you are using crontab for the first time you can clear the \neverything inside and add following lines:  * * * * * /bin/bash ../MalwareTracker/bin/run_rss_tracker.sh\n* * * * * /bin/bash ../MalwareTracker/bin/run_malshare_script.sh\n00 02 * * * /bin/bash ../MalwareTracker/bin/run_daily_digest.sh  Save it and exit. Now if you type  crontab -l  into your terminal you will see 3 jobs that currently working.  So we have collected our data and we set our jobs now it is time to modify  api.py  to get online our server for\nour API.Job Scheduling for the Scripts", 
            "title": "Job Scheduling for the Scripts"
        }, 
        {
            "location": "/guide/demoinstall/#building-the-api", 
            "text": "API will be serving on a server with  flask .  api.py  in our project folder will be using for this purpose.", 
            "title": "Building the API"
        }, 
        {
            "location": "/guide/demoinstall/#apipy", 
            "text": "This python file connects our databases to users via flask framework. You can run it on your localhost to test.  api.py  initally set to work on  localhost:8080  so if you just want to test your API just run this command:  (venv) ../MalwareTracker python3 api.py  Now your API is available on your localhost.  If you want to change the port you can done it modifying  api.py :  app.run(host='127.0.0.1', port='8080')  Change 8080 to any port that you want. If you remove port parameter your server will be running on port  5000  \nby default.  If you want to run this API on an online server change this line like following:  app.run(host='0.0.0.0', port='8080')  Now if your IP address is accessible on your server, your website will be online.   For further information read the  flask documentation .", 
            "title": "api.py"
        }, 
        {
            "location": "/guide/scripts/", 
            "text": "Introduction\n\n\nThere are 2 types of scripts in this projects,\n\n\n\n\n\n\nPython Scripts\n\n\n\n\n\n\nBash Scripts\n\n\n\n\n\n\nPython Scripts are using for converting epoch time format into datetime format, fetching malware data from 3 different\nwebsites.\n\n\nBash Scripts are using for handling python scripts.\n\n\nPython Scripts\n\n\n\n\nmalshare_api.py\n\n\nThis script parses \nmalshare\n website for the malware data by using website's APIs.\n\n\nIt has 6 different arguments:\n\n\n\n\n\n\n--untilyesterday\n, \n-uyes\n       \n\n\n\n\n\n\n--hash2detail\n, \n-h2d\n\n\n\n\n\n\n--sources24\n, \n-s24\n            \n\n\n\n\n\n\n--update24\n, \n-up24\n            \n\n\n\n\n\n\n--bydate BYDATE\n, \n-bd BYDATE\n  \n\n\n\n\n\n\n--update\n, \n-up\n  \n\n\n\n\n\n\n\n\n--untilyesterday\n \n-uyes\n\n\nThis argument gets the all MD5 hashes since the date that you provide by \nfirst_epoch_of_hash\n variable in \nconfig.py\n.\n\n\nIt is initially set to \n1505347200\n which is the date (2017-09-14) of first archived data in \nmalshare\n.\n\n\n--hash2detail\n \n-h2d\n\n\nThis argument deals with 2 databases:\n\n\n\n\n\n\nDatabase that contains MD5 hashes and date in epoch format.\n\n\n\n\n\n\nDatabase that will be created and will be contain details of related MD5 hash that referenced from hashes database.\n\n\n\n\n\n\n--sources24\n \n-s24\n\n\nThis argument gets the sources of past 24 hours and creates a database with 2 columns \n(source, date in epoch format)\n\nwith the name that you provide by \nhashes_db_name\n variable to \nconfig.py\n.\n\n\nIt uses malshare's own API for getting last 24 hours sources.\n\n\n--update24\n \n-up24\n\n\nThis argument gets the details of yesterday and updates the intended database which needs to be provided with the \nfixed_hashes_db\n\nvariable in \nconfig.py\n.\n\n\nIt gets the hashes of 1 day before of today's date from malshare \narchives\n. For example:\n\n\nLets assume that today's date is \n2018-07-17\n so when you run the script with this argument, it will look for the hashes of\n \n2018-07-16\n which is yesterday. It will go \nhere\n and get \nmalshare_fileList.2018-07-16.txt\n\n from \n2018-07-16\n directory. This \ntxt\n file \n contains MD5 hashes of \n2018-07-16\n.\n\n\nAfter the script gets the hashes of yesterday, it will check for the details of every each MD5 hashes by using website's\n API which is:\n\n\n/api.php?api_key=[API_KEY]\naction=details\nhash=[HASH]\n\n\n\n\nIt will collect 3 information from this API;\n\n\n\n\n\n\nMD5\n\n\n\n\n\n\nF_TYPE\n\n\n\n\n\n\nSOURCES\n\n\n\n\n\n\nSince script collected 3 information that we desire from the API it will just put the date of yesterday for the 4th element\nand it will create a database for details which needs to be provided with the \nmalshare_db_name\n variable in \nconfig.py\n.\nIt is initially set to \n'malshare.db'\n but of course you can change it as you want.\n\n\nAt the end we will have a database which contains the details of yesterday recorded data with 4 columns;\n\n\n\n\nhash\n\n\nf_type\n\n\nsource\n\n\ndate\n (in datetime format)\n\n\n\n\n--bydate BYDATE\n \n-bd BYDATE\n\n\nThis argument is for getting MD5 hashes of specific date that you provide by second argument. Date needs to be in\n\nYYYY-MM-DD\n format. \n\n\nFor getting the hashes recorded at 'November 20th, 2017' second argument needs to be given like this: \n2017-10-20\n\n\n../MalwareTracker\npython3 malshare_script.py -bd 2017-10-20\n\n\n\n\nBy this command, in the folder that you provide with \ndatabase_folder\n variable in \nconfig.py\n, a database will\nbe created with the name that you provide with \nhashes_db_name\n variable in \nconfig.py\n.\n\n\nThis database will have 2 columns:\n\n\n\n\nhash\n\n\ndate\n (in epoch format)\n\n\n\n\n--update\n \n-up\n\n\nThis argument is for updating the intended details database with the last 200 entries that recorded in malshare. Actually\nthis argument is using the malshare website's API which lists hashes from the past 24 hours.;\n\n\n/api.php?api_key=[API_KEY]\naction=details\nhash=[HASH]\n\n\n\n\nSince I wanted to update my system for every 20 minutes, it is unnecessary to fetch all of the hashes from the past 24\nhours. That is the reason why this script gets the \nlast\n 200 entries that recorded and can be accessible by this API.\n\n\nBy this argument, in the folder that you provide with \napi_database_folder\n variable in \nconfig.py\n;\n\n\n\n\nif there is not a details database with the name that you provide with \nmalshare_db_name\n variable in \nconfig.py\n,\na details database will be created with the name of \nmalshare_db_name\n variable.\n\n\n\n\nOR\n\n\n\n\nif there is a details database with the name that you provide with \nmalshare_db_name\n variable in \nconfig.py\n,\nthis database will be updated with the last 200 entries.\n\n\n\n\n\n\nepoch_to_datetime.py\n\n\nThis script converts epoch time format into datetime format of a details database with 4 columns;\n\n\n\n\nhash\n\n\nf_type\n\n\nsource\n\n\ndate\n (in epoch format)\n\n\n\n\nName of the details database with the date column in epoch format needs to be provided with \ndb_to_convert\n variable\nin \nconfig.py\n.\n\n\nThis script can be used for 2 different situations;\n\n\n1)\n To insert new rows with datetime format to an existing details database. Follow these instructions:\n\n\nName of the details database with the date column in datetime format which will be updated needs to be provided with\n\nconverted_db\n variable in \nconfig.py\n.\n\n\nAfter the configuration, just run the script and it will convert every row's date column with datetime format and will\ninsert to a new database which will be created with 4 columns;\n\n\n\n\nhash\n\n\nf_type\n\n\nsource\n\n\ndate\n (in datetime format)\n\n\n\n\n2)\n To insert rows with datetime format to a new details database which will be created. Follow these instructions:\n\n\nName of the details database with the date column in datetime format which will be created needs to be provided with\n\nconverted_db\n variable in \nconfig.py\n.\n\n\n\n\nrss_tracker.py\n\n\nThis script parses \nOpenBugBounty\n and \nCyberCrime-Tracker\n\nwebsites' \nRSS\n feed by using \nfeedparser\n library.\n\n\nRSS feed for these websites are:\n\n\n\n\nOpenBugBounty RSS feed \n\n\nCyberCrime-Tracker RSS feed\n\n\n\n\nIn the folder that you provide with \napi_database_folder\n variable in \nconfig.py\n, a database will be created with\nthe name that you provide with \nopenbugbounty_db_name\n and \ncybercrimetracker_db_name\n variables in \nconfig.py\n for\neach website.\n\n\nThis database will have 3 columns;\n\n\n\n\nsource\n\n\nf_type\n\n\ndate\n (in datetime format)\n\n\n\n\n\n\nBash Scripts\n\n\nIn the \nbin/\n folder there are 3 bash scripts that needs to be used for API. Before using them they need to be modified.\nSo here are the instructions for how they should be modified.\n\n\nOnce again these scripts are only for running the whole project as an API. These 3 scripts need to be put to a job\nscheduler. \n\n\n\n\ne.g. \ncrontab\n\n\n\n\nrun_daily_digest.sh\n\n\nThis bash script is for running \nmalshare_script.py\n with \n--update24\n argument. You can find the documentation of this\nargument \nhere\n.\n\n\nrun_daily_digest.sh\n is for getting the hashes and details of each hash which belongs to yesterday.\n\n\nSince malshare puts the all hashes of a day at 01.30(GMT) to their \narchives\n, this scripts\nneeds to be run \nafter 01.30 am (GMT)\n to be able to get the all data belongs to yesterday.\n\n\nconfig.py\n needs to be modified before starting to run this script as desired.\n\n\nPath of the virtual environment needs to be provided correctly in this script. Otherwise, \nmalshare_script.py\n may not be\nable to find needed libraries and most probably will not run properly.\n\n\nInitially \nrun_daily_digest.sh\n is activating a virtual environment named \nvenv\n.\n\n\nrun_malshare_script.sh\n\n\nThis bash script is for running \nmalshare_script.py\n with \n--update\n argument. You can find the documentation of this\nargument \nhere\n.\n\n\nrun_daily_digest.sh\n is for keeping the details database up to date which will be running for our API.\n\n\nconfig.py\n needs to be modified before starting to run this script as desired.\n\n\nPath of the virtual environment needs to be provided correctly in this script. Otherwise, \nmalshare_script.py\n may not be\nable to find needed libraries and most probably will not run properly.\n\n\nInitially \nrun_malshare_script.sh\n is activating a virtual environment named \nvenv\n.\n\n\nrun_rss_tracker.sh\n\n\nThis bash script is for running \nrss_tracker.py\n. You can find the documentation of this python script \n\nhere\n.\n\n\nrun_daily_digest.sh\n is for parsing the RSS feed of 2 websites;\n\n\n\n\nOpenBugBounty RSS feed \n\n\nCyberCrime-Tracker RSS feed\n\n\n\n\nPath of the virtual environment needs to be provided correctly in this script. Otherwise, \nrss_tracker.py\n may not be\nable to find needed libraries and most probably will not run properly.\n\n\nInitially \nrun_rss_tracker.sh\n is activating a virtual environment named \nvenv\n.", 
            "title": "Scripts"
        }, 
        {
            "location": "/guide/scripts/#introduction", 
            "text": "There are 2 types of scripts in this projects,    Python Scripts    Bash Scripts    Python Scripts are using for converting epoch time format into datetime format, fetching malware data from 3 different\nwebsites.  Bash Scripts are using for handling python scripts.", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/scripts/#python-scripts", 
            "text": "", 
            "title": "Python Scripts"
        }, 
        {
            "location": "/guide/scripts/#malshare_apipy", 
            "text": "This script parses  malshare  website for the malware data by using website's APIs.  It has 6 different arguments:    --untilyesterday ,  -uyes            --hash2detail ,  -h2d    --sources24 ,  -s24                 --update24 ,  -up24                 --bydate BYDATE ,  -bd BYDATE       --update ,  -up", 
            "title": "malshare_api.py"
        }, 
        {
            "location": "/guide/scripts/#-untilyesterday-uyes", 
            "text": "This argument gets the all MD5 hashes since the date that you provide by  first_epoch_of_hash  variable in  config.py .  It is initially set to  1505347200  which is the date (2017-09-14) of first archived data in  malshare .", 
            "title": "--untilyesterday -uyes"
        }, 
        {
            "location": "/guide/scripts/#-hash2detail-h2d", 
            "text": "This argument deals with 2 databases:    Database that contains MD5 hashes and date in epoch format.    Database that will be created and will be contain details of related MD5 hash that referenced from hashes database.", 
            "title": "--hash2detail -h2d"
        }, 
        {
            "location": "/guide/scripts/#-sources24-s24", 
            "text": "This argument gets the sources of past 24 hours and creates a database with 2 columns  (source, date in epoch format) \nwith the name that you provide by  hashes_db_name  variable to  config.py .  It uses malshare's own API for getting last 24 hours sources.", 
            "title": "--sources24 -s24"
        }, 
        {
            "location": "/guide/scripts/#-update24-up24", 
            "text": "This argument gets the details of yesterday and updates the intended database which needs to be provided with the  fixed_hashes_db \nvariable in  config.py .  It gets the hashes of 1 day before of today's date from malshare  archives . For example:  Lets assume that today's date is  2018-07-17  so when you run the script with this argument, it will look for the hashes of\n  2018-07-16  which is yesterday. It will go  here  and get  malshare_fileList.2018-07-16.txt \n from  2018-07-16  directory. This  txt  file \n contains MD5 hashes of  2018-07-16 .  After the script gets the hashes of yesterday, it will check for the details of every each MD5 hashes by using website's\n API which is:  /api.php?api_key=[API_KEY] action=details hash=[HASH]  It will collect 3 information from this API;    MD5    F_TYPE    SOURCES    Since script collected 3 information that we desire from the API it will just put the date of yesterday for the 4th element\nand it will create a database for details which needs to be provided with the  malshare_db_name  variable in  config.py .\nIt is initially set to  'malshare.db'  but of course you can change it as you want.  At the end we will have a database which contains the details of yesterday recorded data with 4 columns;   hash  f_type  source  date  (in datetime format)", 
            "title": "--update24 -up24"
        }, 
        {
            "location": "/guide/scripts/#-bydate-bydate-bd-bydate", 
            "text": "This argument is for getting MD5 hashes of specific date that you provide by second argument. Date needs to be in YYYY-MM-DD  format.   For getting the hashes recorded at 'November 20th, 2017' second argument needs to be given like this:  2017-10-20  ../MalwareTracker python3 malshare_script.py -bd 2017-10-20  By this command, in the folder that you provide with  database_folder  variable in  config.py , a database will\nbe created with the name that you provide with  hashes_db_name  variable in  config.py .  This database will have 2 columns:   hash  date  (in epoch format)", 
            "title": "--bydate BYDATE -bd BYDATE"
        }, 
        {
            "location": "/guide/scripts/#-update-up", 
            "text": "This argument is for updating the intended details database with the last 200 entries that recorded in malshare. Actually\nthis argument is using the malshare website's API which lists hashes from the past 24 hours.;  /api.php?api_key=[API_KEY] action=details hash=[HASH]  Since I wanted to update my system for every 20 minutes, it is unnecessary to fetch all of the hashes from the past 24\nhours. That is the reason why this script gets the  last  200 entries that recorded and can be accessible by this API.  By this argument, in the folder that you provide with  api_database_folder  variable in  config.py ;   if there is not a details database with the name that you provide with  malshare_db_name  variable in  config.py ,\na details database will be created with the name of  malshare_db_name  variable.   OR   if there is a details database with the name that you provide with  malshare_db_name  variable in  config.py ,\nthis database will be updated with the last 200 entries.", 
            "title": "--update -up"
        }, 
        {
            "location": "/guide/scripts/#epoch_to_datetimepy", 
            "text": "This script converts epoch time format into datetime format of a details database with 4 columns;   hash  f_type  source  date  (in epoch format)   Name of the details database with the date column in epoch format needs to be provided with  db_to_convert  variable\nin  config.py .  This script can be used for 2 different situations;  1)  To insert new rows with datetime format to an existing details database. Follow these instructions:  Name of the details database with the date column in datetime format which will be updated needs to be provided with converted_db  variable in  config.py .  After the configuration, just run the script and it will convert every row's date column with datetime format and will\ninsert to a new database which will be created with 4 columns;   hash  f_type  source  date  (in datetime format)   2)  To insert rows with datetime format to a new details database which will be created. Follow these instructions:  Name of the details database with the date column in datetime format which will be created needs to be provided with converted_db  variable in  config.py .", 
            "title": "epoch_to_datetime.py"
        }, 
        {
            "location": "/guide/scripts/#rss_trackerpy", 
            "text": "This script parses  OpenBugBounty  and  CyberCrime-Tracker \nwebsites'  RSS  feed by using  feedparser  library.  RSS feed for these websites are:   OpenBugBounty RSS feed   CyberCrime-Tracker RSS feed   In the folder that you provide with  api_database_folder  variable in  config.py , a database will be created with\nthe name that you provide with  openbugbounty_db_name  and  cybercrimetracker_db_name  variables in  config.py  for\neach website.  This database will have 3 columns;   source  f_type  date  (in datetime format)", 
            "title": "rss_tracker.py"
        }, 
        {
            "location": "/guide/scripts/#bash-scripts", 
            "text": "In the  bin/  folder there are 3 bash scripts that needs to be used for API. Before using them they need to be modified.\nSo here are the instructions for how they should be modified.  Once again these scripts are only for running the whole project as an API. These 3 scripts need to be put to a job\nscheduler.    e.g.  crontab", 
            "title": "Bash Scripts"
        }, 
        {
            "location": "/guide/scripts/#run_daily_digestsh", 
            "text": "This bash script is for running  malshare_script.py  with  --update24  argument. You can find the documentation of this\nargument  here .  run_daily_digest.sh  is for getting the hashes and details of each hash which belongs to yesterday.  Since malshare puts the all hashes of a day at 01.30(GMT) to their  archives , this scripts\nneeds to be run  after 01.30 am (GMT)  to be able to get the all data belongs to yesterday.  config.py  needs to be modified before starting to run this script as desired.  Path of the virtual environment needs to be provided correctly in this script. Otherwise,  malshare_script.py  may not be\nable to find needed libraries and most probably will not run properly.  Initially  run_daily_digest.sh  is activating a virtual environment named  venv .", 
            "title": "run_daily_digest.sh"
        }, 
        {
            "location": "/guide/scripts/#run_malshare_scriptsh", 
            "text": "This bash script is for running  malshare_script.py  with  --update  argument. You can find the documentation of this\nargument  here .  run_daily_digest.sh  is for keeping the details database up to date which will be running for our API.  config.py  needs to be modified before starting to run this script as desired.  Path of the virtual environment needs to be provided correctly in this script. Otherwise,  malshare_script.py  may not be\nable to find needed libraries and most probably will not run properly.  Initially  run_malshare_script.sh  is activating a virtual environment named  venv .", 
            "title": "run_malshare_script.sh"
        }, 
        {
            "location": "/guide/scripts/#run_rss_trackersh", 
            "text": "This bash script is for running  rss_tracker.py . You can find the documentation of this python script  here .  run_daily_digest.sh  is for parsing the RSS feed of 2 websites;   OpenBugBounty RSS feed   CyberCrime-Tracker RSS feed   Path of the virtual environment needs to be provided correctly in this script. Otherwise,  rss_tracker.py  may not be\nable to find needed libraries and most probably will not run properly.  Initially  run_rss_tracker.sh  is activating a virtual environment named  venv .", 
            "title": "run_rss_tracker.sh"
        }, 
        {
            "location": "/guide/configuration/", 
            "text": "Introduction\n\n\nThere is a config file which includes couple of variables that needs to be modified before start to run most of the\nscripts in this project. Here is the guide for how to handle this config file with those variables.\n\n\nVariables\n\n\n\n\n\n\ndatabase_folder\n: This variable is to define the path of the folder which will contain databases that will be created. \n\n\n\n\n\n\napi_database_folder\n: This variable is to define the path of the folder which will contain databases of API. It is \nfixed and not recommended to change since it may effect the API.\n\n\n\n\n\n\ndb_to_convert\n: This variable is to define the name of database with the date column in epoch format which will be\n used for \nepoch_to_datetime.py\n file. \n\n\n\n\n\n\nconverted_db\n: This variable is to define the name of database with the date column in datetime format which will be\n used for \nepoch_to_datetime.py\n file. \n\n\n\n\n\n\nfirst_epoch_of_hash\n: This variable is to define the first date of hash fetching from \nmalshare archives\n.\n\n\n\n\n\n\nmalshare_api_key\n: The variable where you will put your \napi key\n that you get from \nmalshare\n.\n\n\n\n\n\n\nhashes_db_name\n: This variable is to define the name of database which contains hashes and dates for a couple of\n arguments of \nmalshare_script.py\n.\n\n\n\n\n\n\ndetails_db_name\n: This variable is to define the name of database which contains details of hashes for a couple of\narguments of \nmalshare_script.py\n.\n\n\n\n\n\n\nfixed_hashes_db\n: This variable is to define the name of hashes database that will be used for \nmalshare_script.py\n\nwith \n--update24\n argument.\n\n\n\n\n\n\nmalshare_db_name\n: This variable is to define the name of details database that will be used for \nmalshare_script.py\n\nwith \n--update\n and also \n--update24\n arguments.\n\n\n\n\n\n\nopenbugbounty_db_name\n: This variable is to define the name of database of \nopenbugbounty\n's \nRSS feed that will be used for \nrss_tracker.py\n.\n\n\n\n\n\n\ncybercrimetracker_db_name\n: This variable is to define the name of database of \ncybercrimetracker\n's \nRSS feed that will be used for \nrss_tracker.py\n.\n\n\n\n\n\n\n\n\nUsage\n\n\ndatabase_folder\n\n\nThis variable is the variable that you are going to define your database folder. Initially it is set to \n'./Databases'\n\nfolder.\n\n\napi_database_folder\n\n\nThis variable is the variable that you are going to define your database folder which will be used for you API. It will\ncontain the databases that people can access by using you API. Basically, whatever .db file which is database inside of\nthis folder, will be able to accessible via API. \n\n\nSince \nmalshare_script.py\n has many arguments and it is not only for API usage but also for different purposes of usage,\nI've decided to store the databases which will be used by API not in \ndatabase_folder\n but in a seperated folder to avoid\nconflicts.\n\n\nInitially this variable is set to \n'database_folder + 'api-db/' '\n which means it will be always inside of \n\ndatabase_folder\n variable. So all of the databases whetever using for API or for other purposes will be in the same\nfolder but using for API ones will be in a sub folder.\n\n\ndb_to_convert\n\n\nThis variable is only for \nepoch_to_datetime.py\n script. Whatever the name you provide to this variable,\n\nepoch_to_datetime.py\n script will look for a database that will be converted in the database folder that you define\nwith \ndatabase_folder\n variable in \nconfig.py\n.\n\n\nFor example:\n\n\nIf you have a database named \n'epoch_db.db'\n with 2 columns \n'hash'\n and \n'date'\n (in epoch format) in a table named\n\n'data'\n, set this variable to 'epoch_db.db' and \ndatabase_folder\n variable to './Databases', \nepoch_to_datetime.py\n will\nfirst look into './Databases' folder and it will require to find a database with the name 'epoch_db.db'. \n\n\nBut when you try to run \nepoch_to_datetime.py\n without having a database named \n'epoch_db.db'\n, it will raise an error.\n\n\nconverted_db\n\n\nThis variable is only for \nepoch_to_datetime.py\n script. Whatever the name you provide to this variable,\n\nepoch_to_datetime.py\n script will create or update a database, in the database folder that you define with \n\ndatabase_folder\n variable in \nconfig.py\n, depending on a database with this name exists or not.\n\n\nfirst_epoch_of_hash\n\n\nThis variable is only for \nget_hashes_until_yesterday()\n function of \nmalshare_script.py\n script. This function is getting\ndate in epoch format as a parameter and fetching hashes for single day beginning from this parameter.\n\n\nFor example:\n\n\nIf you set \nfirst_epoch_of_hash\n variable to '1505347200' which is 2017-09-14, \nget_hashes_until_yesterday\n function\nwill fetch all of the hashes for every single day since 2017-09-14.\n\n\nAssume that today's date is \n2018-07-18\n and you want to fetch the MD5 hashes since \n6th of June, 2018\n. What you need to do\nis just set this variable to epoch format of 6th of June, 2018 which is \n'1528243200'\n. \n\n\nHere you go, you will have \na database which will contain MD5 hashes beginning from 6th of June until 17th of July, which is yesterday, and this\ndatabase will have 2 columns;\n\n\n\n\nhash\n\n\ndate\n (in epoch format)\n\n\n\n\nmalshare_api_key\n\n\nThis variable is for your MalShare api key. You have to have an api key in order to use \nMalShare API's\n.\n\n\nIf you do not have an api key, you can register and obtain your api key \nhere\n.\n\n\n\n\nNote: Standard keys allow 1000 API calls per day (including downloading samples, details lookup and search).\n\n\n\n\nhashes_db_name\n\n\nThis variable is being used for the databases which includes hashes and sources. It is used for following arguments:\n\n\n\n\n--untilyesterday\n\n\n--hash2detail\n\n\n--sources24\n\n\n--bydate\n\n\n\n\nExcept the \n--sources24\n argument it creates or handles databases with a table named \nhash_data\n. This table has\n2 columns which are \nhash\n and \ndate\n (in epoch format). \n\n\nFor the \n--sources24\n argument it creates or handles database with a table named \nsource_data\n. This table has\n2 columns which are \nsource\n and \ndate\n (in epoch format).\n\n\ndetails_db_name\n\n\nThis variable is being used for the databases which includes details of hashes. It is used only for \n--hash2detail\n\nargument of \nmalshare_script.py\n.\n\n\nIt creates or handles database with a table named \ndata\n. This table has 4 columns which are \nhash\n, \nf_type\n, \n\nsource\n, \ndate\n.\n\n\nfixed_hashes_db\n\n\nThis variable is only being used for \n--update24\n argument of \nmalshare_script.py\n. Set this variable to any db name\nending with '.db'. For example: \nyesterday_hashes.db\n\n\nmalshare_db_name\n\n\nThis variable is being used for \n--update24\n and \n--update\n argument of \nmalshare_script.py\n. Set this variable to\nany db name ending with '.db' as you desire. For example: \nmalshare.db\n.\n\n\nIt is initially set to \n'malshare.db'\n. Since \n--update24\n and \n--update\n arguments are using for API, it needed to\nhave a fixed details database name in order to run these arguments properly.\n\n\n\n\n\n\n--update24\n argument uses this variable as target database to update it every 24 hours.\n\n\n\n\n\n\n--update\n argument uses this variable as target database to update periodically depending on your job schedule. (Every\n20 minutes for me.)\n\n\n\n\n\n\nopenbugbounty_db_name\n\n\nThis variable is being used for \nprocess_openbugbounty()\n function of \nrss_tracker.py\n script. This function is getting\nused for parsing RSS feed of \nOpenBugBounty RSS feed \n.\n\n\nChange this variable to any database name ending with '.db' as you desire and this database will be storing your malware\ndetails belonging to openbugbounty.\n\n\ncybercrimetracker_db_name\n\n\nThis variable is being used for \nprocess_cybercrimetracker()\n function of \nrss_tracker.py\n script. This function is getting\nused for parsing RSS feed of \nCyberCrime-Tracker RSS feed\n.\n\n\nChange this variable to any database name ending with '.db' as you desire and this database will be storing your malware\ndetails belonging to cybercrime-tracker.", 
            "title": "Configuration"
        }, 
        {
            "location": "/guide/configuration/#introduction", 
            "text": "There is a config file which includes couple of variables that needs to be modified before start to run most of the\nscripts in this project. Here is the guide for how to handle this config file with those variables.", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/configuration/#variables", 
            "text": "database_folder : This variable is to define the path of the folder which will contain databases that will be created.     api_database_folder : This variable is to define the path of the folder which will contain databases of API. It is \nfixed and not recommended to change since it may effect the API.    db_to_convert : This variable is to define the name of database with the date column in epoch format which will be\n used for  epoch_to_datetime.py  file.     converted_db : This variable is to define the name of database with the date column in datetime format which will be\n used for  epoch_to_datetime.py  file.     first_epoch_of_hash : This variable is to define the first date of hash fetching from  malshare archives .    malshare_api_key : The variable where you will put your  api key  that you get from  malshare .    hashes_db_name : This variable is to define the name of database which contains hashes and dates for a couple of\n arguments of  malshare_script.py .    details_db_name : This variable is to define the name of database which contains details of hashes for a couple of\narguments of  malshare_script.py .    fixed_hashes_db : This variable is to define the name of hashes database that will be used for  malshare_script.py \nwith  --update24  argument.    malshare_db_name : This variable is to define the name of details database that will be used for  malshare_script.py \nwith  --update  and also  --update24  arguments.    openbugbounty_db_name : This variable is to define the name of database of  openbugbounty 's \nRSS feed that will be used for  rss_tracker.py .    cybercrimetracker_db_name : This variable is to define the name of database of  cybercrimetracker 's \nRSS feed that will be used for  rss_tracker.py .", 
            "title": "Variables"
        }, 
        {
            "location": "/guide/configuration/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/guide/configuration/#database_folder", 
            "text": "This variable is the variable that you are going to define your database folder. Initially it is set to  './Databases' \nfolder.", 
            "title": "database_folder"
        }, 
        {
            "location": "/guide/configuration/#api_database_folder", 
            "text": "This variable is the variable that you are going to define your database folder which will be used for you API. It will\ncontain the databases that people can access by using you API. Basically, whatever .db file which is database inside of\nthis folder, will be able to accessible via API.   Since  malshare_script.py  has many arguments and it is not only for API usage but also for different purposes of usage,\nI've decided to store the databases which will be used by API not in  database_folder  but in a seperated folder to avoid\nconflicts.  Initially this variable is set to  'database_folder + 'api-db/' '  which means it will be always inside of  database_folder  variable. So all of the databases whetever using for API or for other purposes will be in the same\nfolder but using for API ones will be in a sub folder.", 
            "title": "api_database_folder"
        }, 
        {
            "location": "/guide/configuration/#db_to_convert", 
            "text": "This variable is only for  epoch_to_datetime.py  script. Whatever the name you provide to this variable, epoch_to_datetime.py  script will look for a database that will be converted in the database folder that you define\nwith  database_folder  variable in  config.py .  For example:  If you have a database named  'epoch_db.db'  with 2 columns  'hash'  and  'date'  (in epoch format) in a table named 'data' , set this variable to 'epoch_db.db' and  database_folder  variable to './Databases',  epoch_to_datetime.py  will\nfirst look into './Databases' folder and it will require to find a database with the name 'epoch_db.db'.   But when you try to run  epoch_to_datetime.py  without having a database named  'epoch_db.db' , it will raise an error.", 
            "title": "db_to_convert"
        }, 
        {
            "location": "/guide/configuration/#converted_db", 
            "text": "This variable is only for  epoch_to_datetime.py  script. Whatever the name you provide to this variable, epoch_to_datetime.py  script will create or update a database, in the database folder that you define with  database_folder  variable in  config.py , depending on a database with this name exists or not.", 
            "title": "converted_db"
        }, 
        {
            "location": "/guide/configuration/#first_epoch_of_hash", 
            "text": "This variable is only for  get_hashes_until_yesterday()  function of  malshare_script.py  script. This function is getting\ndate in epoch format as a parameter and fetching hashes for single day beginning from this parameter.  For example:  If you set  first_epoch_of_hash  variable to '1505347200' which is 2017-09-14,  get_hashes_until_yesterday  function\nwill fetch all of the hashes for every single day since 2017-09-14.  Assume that today's date is  2018-07-18  and you want to fetch the MD5 hashes since  6th of June, 2018 . What you need to do\nis just set this variable to epoch format of 6th of June, 2018 which is  '1528243200' .   Here you go, you will have \na database which will contain MD5 hashes beginning from 6th of June until 17th of July, which is yesterday, and this\ndatabase will have 2 columns;   hash  date  (in epoch format)", 
            "title": "first_epoch_of_hash"
        }, 
        {
            "location": "/guide/configuration/#malshare_api_key", 
            "text": "This variable is for your MalShare api key. You have to have an api key in order to use  MalShare API's .  If you do not have an api key, you can register and obtain your api key  here .   Note: Standard keys allow 1000 API calls per day (including downloading samples, details lookup and search).", 
            "title": "malshare_api_key"
        }, 
        {
            "location": "/guide/configuration/#hashes_db_name", 
            "text": "This variable is being used for the databases which includes hashes and sources. It is used for following arguments:   --untilyesterday  --hash2detail  --sources24  --bydate   Except the  --sources24  argument it creates or handles databases with a table named  hash_data . This table has\n2 columns which are  hash  and  date  (in epoch format).   For the  --sources24  argument it creates or handles database with a table named  source_data . This table has\n2 columns which are  source  and  date  (in epoch format).", 
            "title": "hashes_db_name"
        }, 
        {
            "location": "/guide/configuration/#details_db_name", 
            "text": "This variable is being used for the databases which includes details of hashes. It is used only for  --hash2detail \nargument of  malshare_script.py .  It creates or handles database with a table named  data . This table has 4 columns which are  hash ,  f_type ,  source ,  date .", 
            "title": "details_db_name"
        }, 
        {
            "location": "/guide/configuration/#fixed_hashes_db", 
            "text": "This variable is only being used for  --update24  argument of  malshare_script.py . Set this variable to any db name\nending with '.db'. For example:  yesterday_hashes.db", 
            "title": "fixed_hashes_db"
        }, 
        {
            "location": "/guide/configuration/#malshare_db_name", 
            "text": "This variable is being used for  --update24  and  --update  argument of  malshare_script.py . Set this variable to\nany db name ending with '.db' as you desire. For example:  malshare.db .  It is initially set to  'malshare.db' . Since  --update24  and  --update  arguments are using for API, it needed to\nhave a fixed details database name in order to run these arguments properly.    --update24  argument uses this variable as target database to update it every 24 hours.    --update  argument uses this variable as target database to update periodically depending on your job schedule. (Every\n20 minutes for me.)", 
            "title": "malshare_db_name"
        }, 
        {
            "location": "/guide/configuration/#openbugbounty_db_name", 
            "text": "This variable is being used for  process_openbugbounty()  function of  rss_tracker.py  script. This function is getting\nused for parsing RSS feed of  OpenBugBounty RSS feed  .  Change this variable to any database name ending with '.db' as you desire and this database will be storing your malware\ndetails belonging to openbugbounty.", 
            "title": "openbugbounty_db_name"
        }, 
        {
            "location": "/guide/configuration/#cybercrimetracker_db_name", 
            "text": "This variable is being used for  process_cybercrimetracker()  function of  rss_tracker.py  script. This function is getting\nused for parsing RSS feed of  CyberCrime-Tracker RSS feed .  Change this variable to any database name ending with '.db' as you desire and this database will be storing your malware\ndetails belonging to cybercrime-tracker.", 
            "title": "cybercrimetracker_db_name"
        }
    ]
}