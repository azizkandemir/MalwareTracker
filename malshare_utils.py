import json
import urllib.request
from datetime import date, timedelta
import config
from datetime import datetime
import argparse


def epoch_of_yesterday():
    yesterday = date.today() - timedelta(1)
    return int(yesterday.strftime("%s"))


def valid_datetime_type(arg_datetime_str):
    try:
        datetime.strptime(arg_datetime_str, "%Y-%m-%d")
        return arg_datetime_str
    except ValueError:
        msg = "Given Datetime ({0}) not valid! Expected format, 'YYYY-MM-DD'!".format(arg_datetime_str)
        raise argparse.ArgumentTypeError(msg)


def datetime_of_yesterday():
    yesterday_datetime = ((datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d'))
    return yesterday_datetime


def get_malware_daily(intented_date):
    check_list = []
    malware_return_list = []
    malware_daily_url = "https://malshare.com/daily/{}/malshare_fileList.{}.txt".format(intented_date, intented_date)

    try:
        malware_daily_request = urllib.request.urlopen(malware_daily_url)
        malware_daily_response = malware_daily_request.read().decode("utf8")
        malware_daily_request.close()
        check_list = malware_daily_response.split('\n')
    except:
        pass

    for item in check_list:
        if item:
            malware_return_list.append(item)

    return malware_return_list


def fetch_hash_details(intended_hash):
    malware_details_url = "https://malshare.com/api.php?api_key={}&action=details&hash={}".format(config.malshare_api_key,
                                                                                                  intended_hash)
    malware_details_return_dict = {}
    try:
        malware_details_request = urllib.request.urlopen(malware_details_url)
        malware_details_return_dict = json.loads(malware_details_request.read().decode())
    except:
        print("Exception at calling malware details fetch url")

    return malware_details_return_dict